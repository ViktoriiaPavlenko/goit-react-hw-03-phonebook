{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactsForm/ContactsForm.module.css"],"names":["module","exports","ContactsForm","state","name","number","nameId","nanoid","telId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","styles","form","this","label","htmlFor","input","type","pattern","title","required","onChange","id","button","Component","ContactsListItem","contact","onDeleteContact","info","onClick","ContactsList","contacts","length","warning","list","map","item","Filter","App","filter","addNewContact","newContact","find","toLowerCase","alert","deleteContact","contactId","previousState","handleChangeFilter","getFilteredContacts","filtered","includes","localStorage","getItem","parsedСontacts","JSON","parse","prevProps","prevState","nextContacts","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.505e59ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2eFWz\",\"input\":\"Filter_input__3wLY9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__2tt05\",\"item\":\"ContactsList_item__2m99e\",\"info\":\"ContactsList_info__2fUAL\",\"button\":\"ContactsList_button__2p2nS\",\"warning\":\"ContactsList_warning__3Omnk\"};","import React, { Component } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport styles from './ContactsForm.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  nameId = nanoid();\r\n  telId = nanoid();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({[name]: value,});\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <label className={styles.label} htmlFor={this.nameId}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            onChange={this.handleChange}\r\n            id={this.nameId}\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.label} htmlFor={this.telId}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            onChange={this.handleChange}\r\n            id={this.telId}\r\n          />\r\n        </label>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactsForm;","import styles from './ContactsList.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactsListItem = ({ contact, onDeleteContact }) => (\r\n    <>\r\n        <span className={styles.info}>{contact.name}: {contact.number}</span>\r\n        <button className={styles.button} type=\"button\" onClick={() =>\r\n            onDeleteContact(contact.id)}>Delete</button>\r\n    </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n    contact: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsListItem;","import styles from './ContactsList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport ContactsListItem from './ContactsListItem';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n    (contacts.length === 0) ? <div className={styles.warning}>You have no contacts!</div>\r\n    : <ul className={styles.list}>\r\n        {contacts.map(contact => (\r\n            <li key={contact.id} className={styles.item}>\r\n                <ContactsListItem contact={contact} onDeleteContact={onDeleteContact}/>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;","import styles from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={styles.label}>\r\n      Find contacts\r\n      <input\r\n        className={styles.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport ContactsForm from './components/ContactsForm/ContactsForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    filter: PropTypes.string,\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedСontacts = JSON.parse(contacts);\n\n    if (parsedСontacts) {\n      this.setState({ contacts: parsedСontacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  addNewContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    contacts.find(\n      contact => newContact.name.toLowerCase() === contact.name.toLowerCase(),\n    )\n      ? alert(`${newContact.name} is already in contacts`)\n      : this.setState(({ contacts }) => ({\n          contacts: [newContact, ...contacts],\n        }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(previousState => ({\n      contacts: previousState.contacts.filter(\n        contact => contact.id !== contactId,\n      ),\n    }));\n  };\n\n  handleChangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const filtered = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filtered),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm onSubmit={this.addNewContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.handleChangeFilter} />\n        <ContactsList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__DT_C6\",\"label\":\"ContactsForm_label__2mvKJ\",\"input\":\"ContactsForm_input__pBf3C\",\"button\":\"ContactsForm_button__3l6Q7\"};"],"sourceRoot":""}